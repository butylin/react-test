{"version":3,"sources":["components/DefaultQuestionView.js","utils/QuestionFactory.js","components/QuizView.js","components/QuizList.js","components/QuestionEdit.js","components/QuizEdit.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["DefaultQuestionView","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","question","setState","answerComponents","answers","map","a","react_default","createElement","key","index","text","correct","className","Component","defaultProps","quiz","QuestionFactory","type","DefaultQuestionView_DefaultQuestionView","id","QuizView","questionComponents","console","log","questions","q","getQuestionComponent","title","QuizList","quizList","_this2","newQuizList","filter","updateQuizList","_this3","quizRows","length","href","onClick","changePage","handleDelete","bind","QuestionEdit","handleTextChange","assertThisInitialized","handleAnswerChange","event","target","value","getAttribute","alert","onChange","required","defaultChecked","handleSetCorrect","QuizEdit","currentQuiz","getQuizForEdit","newQuestions","success","handleSubmit","handleTitleChange","handleAddQuestion","getEmptyQuiz","uuid","v4","oldQuestions","concat","saveQuiz","preventDefault","newQuiz","newQuestion","getEmptyQuestion","push","undefined","questionListComponents","QuestionEdit_QuestionEdit","onSubmit","defaultValue","readOnly","NavBar","App","mockQuizzes","getMockQuizes","quizzes","currentPage","handleChangePage","handleSaveQuiz","handleUpdateQuizList","page","arguments","newQuizzes","findIndex","currentPageComponents","getCurrentPageComponents","NavBar_NavBar","QuizList_QuizList","QuizView_QuizView","QuizEdit_QuizEdit","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.95e3ec8d.chunk.js","sourcesContent":["/**\r\n * Created by serg on 10-Jan-19.\r\n */\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Default question view\r\n */\r\nexport default class DefaultQuestionView extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            question : {},\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n           question : this.props.question\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let answerComponents;\r\n        if(this.state.question.answers){\r\n            answerComponents = this.state.question.answers.map(a => {\r\n                return (\r\n                    <li key={a.index}>\r\n                        {a.text} <strong>{a.correct ? ' correct': ''}</strong>\r\n                    </li>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"panel panel-primary\">\r\n                <div className=\"panel-heading\">{this.state.question.text}</div>\r\n                <div className=\"panel-body\">{answerComponents}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDefaultQuestionView.propTypes = {question : PropTypes.object};\r\nDefaultQuestionView.defaultProps = {quiz: null};","/**\r\n * Created by serg on 10-Jan-19.\r\n */\r\nimport React from 'react';\r\nimport DefaultQuestionView from '../components/DefaultQuestionView';\r\n\r\n/**\r\n * Factory for building question view components base on question type\r\n */\r\nexport default class QuestionFactory {\r\n    static getQuestionComponent(question) {\r\n        switch (question.type) {\r\n            case 'MULT':\r\n                return <DefaultQuestionView key={question.id} question={question}/>;\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport QuestionFactory from '../utils/QuestionFactory';\r\n\r\n/**\r\n * Implements the view component of a quiz\r\n */\r\nexport default class QuizView extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            quiz : {}\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n           quiz : this.props.quiz\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.quiz);\r\n        let questionComponents;\r\n        if(this.state.quiz){\r\n            //question components are provided by QuestionFactory based on question type\r\n            questionComponents = this.state.quiz.questions.map((q) => QuestionFactory.getQuestionComponent(q));\r\n        }\r\n\r\n        return (\r\n            <div className=\"panel panel-default\">\r\n                <div className=\"panel-heading\">{this.state.quiz.title}</div>\r\n                <div className=\"panel-body\">{questionComponents}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuizView.propTypes = {quiz : PropTypes.object};\r\nQuizView.defaultProps = {quiz: null};\r\n\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Implements list of quizzes and its functions View, Edit, Delete\r\n */\r\nexport default class QuizList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            quizList : this.props.quizList\r\n        }\r\n    }\r\n\r\n\r\n    handleDelete(id) {\r\n        let newQuizList = this.state.quizList.filter((q) => q.id !== id);\r\n        this.setState({\r\n            quizList : newQuizList\r\n        },() => {\r\n            this.props.updateQuizList(this.state.quizList);\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let quizRows = this.state.quizList.map((q) =>{\r\n            return (\r\n                <tr key={q.id}>\r\n                    <td>{q.title}</td>\r\n                    <td>{q.questions.length}</td>\r\n                    <td>{q.id}</td>\r\n                    <td>\r\n                        <a href='#view'\r\n                           onClick={() => this.props.changePage('quizView', q)}\r\n                           className='btn btn-info m-r-1em'> View\r\n                        </a>\r\n                        <a href='#edit'\r\n                           onClick={() => this.props.changePage('quizEdit', q)}\r\n                           className='btn btn-primary m-r-1em'> Edit\r\n                        </a>\r\n                        <button\r\n                            onClick={this.handleDelete.bind(this, q.id)}\r\n                            className='btn btn-danger'> Delete\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            this.state.quizList.length < 1 ?\r\n                <div className='alert alert-danger'>Quiz list is empty!</div>\r\n                    :\r\n                <table className='table table-bordered table-hover'>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Title</th>\r\n                        <th>Number of questions</th>\r\n                        <th>ID</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {quizRows}\r\n                    </tbody>\r\n                </table>\r\n        );\r\n    }\r\n}\r\n\r\nQuizList.propTypes = {\r\n    quizList : PropTypes.array,\r\n    changePage : PropTypes.func,\r\n    updateQuizList : PropTypes.func\r\n};\r\nQuizList.defaultProps = {quizList: []};","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport uuid from 'uuid';\r\n\r\n/**\r\n * Implements question edit/create page\r\n */\r\nexport default class QuestionEdit extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let question = this.props.question;\r\n        console.log(question);\r\n        this.state = {\r\n            question : question\r\n        };\r\n\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleAnswerChange = this.handleAnswerChange.bind(this);\r\n    }\r\n\r\n    handleTextChange(event) {\r\n        let question = this.state.question;\r\n        question.text = event.target.value;\r\n        this.setState({\r\n            question : question\r\n        });\r\n    }\r\n\r\n    handleSetCorrect(event) {\r\n        let question = this.state.question;\r\n        let index = event.target.value;\r\n        question.answers[index].correct = !question.answers[index].correct;\r\n        this.setState({\r\n            question : question\r\n        });\r\n    }\r\n\r\n    handleAnswerChange(event) {\r\n        let question = this.state.question;\r\n        let index = event.target.getAttribute(\"id\");\r\n        question.answers[index].text = event.target.value;\r\n        this.setState({\r\n            question : question\r\n        });\r\n    }\r\n\r\n    handleQuestionDelete(id) {\r\n        alert('delete ' + this.state.question.id);\r\n    }\r\n\r\n    render() {\r\n        let answers = this.state.question.answers.map((a) => {\r\n            return (\r\n                <li key = {a.id} className = \"list-group-item\">\r\n                    <input\r\n                        type = 'text'\r\n                        id = {a.index}\r\n                        value = {a.text}\r\n                        onChange = {this.handleAnswerChange}\r\n                        required\r\n                        className = 'form-control'\r\n                    />\r\n                    <label className=\"checkbox-inline\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            value={a.index}\r\n                            defaultChecked = {a.correct}\r\n                            onChange={this.handleSetCorrect.bind(this)}\r\n                        />\r\n                            Correct\r\n                    </label>\r\n                </li>\r\n            );\r\n\r\n        });\r\n\r\n        //console.log(answers);\r\n\r\n        return (\r\n            <div className=\"panel panel-primary\">\r\n                <div className=\"panel-body\">\r\n                    <label>Text</label><br/>\r\n                    <input\r\n                        type='text'\r\n                        value={this.state.question.text}\r\n                        onChange={this.handleTextChange}\r\n                        required\r\n                        className='form-control'\r\n                    />\r\n                    <label>Answers</label><br/>\r\n                    <ul className=\"list-group\">\r\n                        {answers}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuestionEdit.propTypes = {\r\n    question : PropTypes.object\r\n}\r\n\r\nQuestionEdit.defaultProps = {\r\n    question : null\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport uuid from 'uuid';\r\nimport QuestionEdit from '../components/QuestionEdit';\r\n\r\n/**\r\n * Implements quiz edit/create page\r\n */\r\nexport default class QuizEdit extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let currentQuiz = this.getQuizForEdit();\r\n        this.state = {\r\n            currentQuiz : currentQuiz,\r\n            newQuestions : [],\r\n            success : null\r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleTitleChange = this.handleTitleChange.bind(this);\r\n        this.handleAddQuestion = this.handleAddQuestion.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Gets existing of creates empty quiz\r\n     */\r\n    getQuizForEdit() {\r\n        let newQuiz = {};\r\n\r\n        if(this.props.quiz === null){\r\n            newQuiz = this.getEmptyQuiz();\r\n        }else {\r\n            newQuiz = this.props.quiz;\r\n        }\r\n\r\n        return newQuiz;\r\n    }\r\n\r\n    getEmptyQuiz() {\r\n        return {\r\n            id : uuid.v4(),\r\n            title : '',\r\n            questions : []\r\n        };\r\n    }\r\n\r\n    handleSubmit(event){\r\n        let oldQuestions = this.state.currentQuiz.questions;\r\n        let newQuestions = this.state.newQuestions;\r\n        let currentQuiz = this.state.currentQuiz;\r\n\r\n        //merges old and newly created questions in a quiz\r\n        currentQuiz.questions = oldQuestions.concat(newQuestions);\r\n        this.props.saveQuiz(currentQuiz);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleTitleChange(event) {\r\n        let newQuiz = this.state.currentQuiz;\r\n        newQuiz.title = event.target.value;\r\n        this.setState({\r\n            currentQuiz : newQuiz\r\n        });\r\n    }\r\n\r\n    handleAddQuestion(){\r\n        let newQuestion = this.getEmptyQuestion();\r\n        let newQuestions = this.state.newQuestions;\r\n        newQuestions.push(newQuestion);\r\n\r\n        this.setState({\r\n            newQuestions : newQuestions\r\n        });\r\n    }\r\n\r\n    //for simplification all questions contain exactly 4 answers\r\n    getEmptyQuestion() {\r\n        return {\r\n            id : 'QN_' + uuid.v4(),\r\n            type : 'MULT',\r\n            text : '',\r\n            answers : [\r\n                {\r\n                    index : '0',\r\n                    correct : undefined,\r\n                    text : ''\r\n                },\r\n                {\r\n                    index : '1',\r\n                    correct : undefined,\r\n                    text : ''\r\n                },\r\n                {\r\n                    index : '2',\r\n                    correct : undefined,\r\n                    text : ''\r\n                },\r\n                {\r\n                    index : '3',\r\n                    correct : undefined,\r\n                    text : ''\r\n                },\r\n            ]\r\n        };\r\n    }\r\n\r\n    render() {\r\n        let questionListComponents = this.state.currentQuiz.questions.concat(this.state.newQuestions).map((q) => {\r\n            return (\r\n                <QuestionEdit key={q.id} question={q}/>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <table className='table table-bordered table-hover'>\r\n                        <tbody>\r\n\r\n                        <tr>\r\n                            <td>ID</td>\r\n                            <td>\r\n                                <input\r\n                                    type='text'\r\n                                    defaultValue={this.state.currentQuiz.id}\r\n                                    readOnly=\"readOnly\"\r\n                                    required\r\n                                    className='form-control'\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Title</td>\r\n                            <td>\r\n                                <input\r\n                                    type='text'\r\n                                    onChange={this.handleTitleChange}\r\n                                    value={this.state.currentQuiz.title}\r\n                                    required\r\n                                    className='form-control'\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Questions</td>\r\n                            <td>\r\n                                {questionListComponents}\r\n                                <button className=\"btn btn-primary\" onClick={this.handleAddQuestion}>Add question</button>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"submit\"\r\n                                    title=\"Save\"\r\n                                    className='btn btn-success'\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuizEdit.propTypes = {\r\n    quiz : PropTypes.object,\r\n    saveQuiz : PropTypes.func\r\n};\r\n\r\nQuizEdit.defaultProps = {\r\n    quiz : null\r\n};\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Navigation panel component\r\n */\r\nexport default class NavBar extends Component{\r\n    render() {\r\n        return(\r\n            <nav className=\"navbar navbar-inverse\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"navbar-header\">\r\n                        <a className=\"navbar-brand\" href=\"#\">Menu</a>\r\n                    </div>\r\n                    <ul className=\"nav navbar-nav\">\r\n                        <li><a href=\"#/quizlist\" onClick={() => this.props.changePage('quizList')}>Quiz List</a></li>\r\n                        <li><a href=\"#/createquiz\" onClick={() => this.props.changePage('quizCreate', null)}>Create Quiz</a></li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nNavBar.propTypes = {\r\n    changePage : PropTypes.func\r\n}\r\n","import React, { Component } from 'react';\nimport uuid from 'uuid';\nimport QuizView from './components/QuizView';\nimport QuizList from './components/QuizList';\nimport QuizEdit from './components/QuizEdit';\nimport NavBar from './components/NavBar';\nimport './App.css';\n\n/**\n * Main components which controls application routing. Generates mock quizzes\n */\nexport default class App extends Component {\n  constructor(props){\n    super(props);\n\n    let mockQuizzes = this.getMockQuizes();\n\n    this.state = {\n        quizzes : mockQuizzes,\n        currentPage : 'quizList',\n        currentQuiz : {}\n    };\n\n      this.handleChangePage = this.handleChangePage.bind(this);\n      this.handleSaveQuiz = this.handleSaveQuiz.bind(this);\n      this.handleUpdateQuizList = this.handleUpdateQuizList.bind(this);\n  }\n\n /**\n  * Updates the state responsible for switching pages\n  */\n  handleChangePage(page, quiz = null) {\n      this.setState({\n          currentPage : page,\n          currentQuiz : quiz,\n      });\n  }\n\n  /**\n  * Creates new or updates existing quiz in the quiz list\n  */\n  handleSaveQuiz(quiz) {\n      let newQuizzes = this.state.quizzes;\n      let index = newQuizzes.findIndex((q) => q.id === quiz.id);\n\n      if(index === -1){\n          newQuizzes.push(quiz);\n      }else{\n          newQuizzes[index] = quiz;\n      }\n\n      this.setState({\n          quizzes : newQuizzes,\n      });\n\n      this.handleChangePage('quizList');\n  }\n\n  handleUpdateQuizList(quizList) {\n      this.setState({\n          quizzes : quizList\n      });\n  }\n\n  render() {\n      let currentPageComponents  = this.getCurrentPageComponents();\n      return (\n        <div className=\"App\">\n            <NavBar changePage={this.handleChangePage}/>\n            {currentPageComponents}\n        </div>\n      );\n  }\n\n  /**\n  * Returns components based on the current state\n  */\n  getCurrentPageComponents() {\n        let currentPageComponents;\n\n        switch(this.state.currentPage){\n            case 'quizList' :\n                currentPageComponents = <QuizList quizList={this.state.quizzes} changePage = {this.handleChangePage} updateQuizList = {this.handleUpdateQuizList}/>;\n                break;\n            case 'quizView' :\n                currentPageComponents = <QuizView quiz={this.state.currentQuiz} changePage = {this.handleChangePage}/>;\n                break;\n            case 'quizEdit' :\n                currentPageComponents = <QuizEdit quiz={this.state.currentQuiz} saveQuiz = {this.handleSaveQuiz}/>;\n                break;\n            case 'quizCreate' :\n                currentPageComponents = <QuizEdit quiz={null} saveQuiz = {this.handleSaveQuiz}/>;\n                break;\n            default :\n                currentPageComponents = <QuizList quizList={this.state.quizzes} changePage = {this.handleChangePage}/>;\n                break;\n        }\n\n        return currentPageComponents;\n    }\n\n    getMockQuizes() {\n        let quizzes =\n            [\n                {\n                    id: uuid.v4(),\n                    title : 'Quiz1',\n                    questions : [\n                        {\n                            id : 'QN_' + uuid.v4(),\n                            type : 'MULT',\n                            text : 'Your favourite language?',\n                            answers : [\n                                {\n                                    index : '0',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : true,\n                                    text : 'JavaScript'\n                                },\n                                {\n                                    index : '1',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'Java'\n                                },\n                                {\n                                    index : '2',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'C#'\n                                },\n                                {\n                                    index : '3',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'Assembly'\n                                },\n                            ]\n                        },\n                        {\n                            id : 'QN_' + uuid.v4(),\n                            type : 'MULT',\n                            text : 'Your favourite band?',\n                            answers : [\n                                {\n                                    index : '0',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'Foo Fighters'\n                                },\n                                {\n                                    index : '1',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'RHCP'\n                                },\n                                {\n                                    index : '2',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : true,\n                                    text : 'Incubus'\n                                },\n                                {\n                                    index : '3',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'The Beatles'\n                                },\n                            ]\n                        },\n\n                    ]\n                },\n                {\n                    id : uuid.v4(),\n                    title : 'Quiz2',\n                    questions : [\n                        {\n                            id : 'QN_' + uuid.v4(),\n                            type : 'MULT',\n                            text : 'Your favourite language?',\n                            answers : [\n                                {\n                                    index : '0',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : true,\n                                    text : 'JavaScript'\n                                },\n                                {\n                                    index : '1',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'Java'\n                                },\n                                {\n                                    index : '2',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'C#'\n                                },\n                                {\n                                    index : '3',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'Assembly'\n                                },\n                            ]\n                        },\n                        {\n                            id : 'QN_' + uuid.v4(),\n                            type : 'MULT',\n                            text : 'Your favourite band?',\n                            answers : [\n                                {\n                                    index : '0',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'Foo Fighters'\n                                },\n                                {\n                                    index : '1',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'RHCP'\n                                },\n                                {\n                                    index : '2',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : true,\n                                    text : 'Incubus'\n                                },\n                                {\n                                    index : '3',\n                                    id : 'AN_' + uuid.v4(),\n                                    correct : false,\n                                    text : 'The Beatles'\n                                },\n                            ]\n                        },\n\n                    ]\n                }\n            ];\n        return quizzes;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}