{"version":3,"sources":["components/DefaultQuestion.js","utils/QuestionFactory.js","components/Quiz.js","components/QuizList.js","components/QuestionEdit.js","components/QuizEdit.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["DefaultQuestion","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","question","setState","props","answerComponents","answers","map","a","react_default","createElement","key","index","text","correct","className","Component","defaultProps","quiz","QuestionFactory","type","DefaultQuestion_DefaultQuestion","id","Quiz","questionComponents","console","log","questions","q","getQuestionComponent","title","QuizList","quizList","_this2","quizRows","length","onClick","changePage","href","QuestionEdit","getQuestionForEdit","handleTextChange","bind","assertThisInitialized","handleAnswerChange","event","target","value","getAttribute","uuid","v4","undefined","onChange","required","QuizEdit","currentQuiz","getQuizForEdit","newQuestions","success","handleSubmit","handleTitleChange","handleAddQuestion","oldQuestions","concat","saveQuiz","preventDefault","newQuiz","newQuestion","push","questionListComponents","QuestionEdit_QuestionEdit","successCreation","onSubmit","defaultValue","readOnly","NavBar","App","currentPage","currentQuestion","quizzes","handleChangePage","handleSaveQuiz","getQuizzes","page","arguments","newQuizzes","findIndex","currentPageComponents","getCurrentPageComponents","NavBar_NavBar","QuizList_QuizList","Quiz_Quiz","QuizEdit_QuizEdit","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd751f4d.chunk.js","sourcesContent":["/**\r\n * Created by serg on 10-Jan-19.\r\n */\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class DefaultQuestion extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            question : {},\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n           question : this.props.question\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let answerComponents;\r\n        if(this.state.question.answers){\r\n            answerComponents = this.state.question.answers.map(a => {\r\n                return (\r\n                    <li key={a.index}>\r\n                        {a.text} <strong>{a.correct ? ' correct': ''}</strong>\r\n                    </li>\r\n                );\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"panel panel-primary\">\r\n                <div className=\"panel-heading\">{this.state.question.text}</div>\r\n                <div className=\"panel-body\">{answerComponents}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nDefaultQuestion.propTypes = {question : PropTypes.object};\r\nDefaultQuestion.defaultProps = {quiz: null};","/**\r\n * Created by serg on 10-Jan-19.\r\n */\r\nimport React from 'react';\r\nimport DefaultQuestion from '../components/DefaultQuestion';\r\n\r\nexport default class QuestionFactory {\r\n    static getQuestionComponent(question) {\r\n        switch (question.type) {\r\n            case 'MULT':\r\n                return <DefaultQuestion key={question.id} question={question}/>;\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Created by serg on 10-Jan-19.\r\n */\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport QuestionFactory from '../utils/QuestionFactory';\r\n\r\nexport default class Quiz extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            quiz : {}\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.setState({\r\n           quiz : this.props.quiz\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.quiz);\r\n        let questionComponents;\r\n        if(this.state.quiz){\r\n            questionComponents = this.state.quiz.questions.map(q => QuestionFactory.getQuestionComponent(q));\r\n        }\r\n\r\n        return (\r\n            <div className=\"panel panel-default\">\r\n                <div className=\"panel-heading\">{this.state.quiz.title}</div>\r\n                <div className=\"panel-body\">{questionComponents}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuiz.propTypes = {quiz : PropTypes.object};\r\nQuiz.defaultProps = {quiz: null};\r\n\r\n","/**\r\n * Created by serg on 10-Jan-19.\r\n */\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class QuizList extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            quizList : []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            quizList : this.props.quizList\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let quizRows = this.state.quizList.map((q) =>{\r\n            // console.log('curr quiz');\r\n            // console.log(q);\r\n            return (\r\n                <tr key={q.id}>\r\n                    <td>{q.id}</td>\r\n                    <td>{q.title}</td>\r\n                    <td>{q.questions.length}</td>\r\n                    <td>\r\n                        <button\r\n                           onClick={() => this.props.changePage('quizView', q)}\r\n                           className='btn btn-info m-r-1em'> View\r\n                        </button>\r\n                        <button href='#'\r\n                           onClick={() => this.props.changePage('quizEdit', q)}\r\n                           className='btn btn-primary m-r-1em'> Edit\r\n                        </button>\r\n                        <button\r\n                            onClick={() => this.props.changePage('quizEdit', q)}\r\n                            className='btn btn-danger'> Delete\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        return (\r\n            this.state.quizList.length < 1 ?\r\n                <div className='alert alert-danger'>No quizzes created</div>\r\n                    :\r\n                <table className='table table-bordered table-hover'>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>ID</th>\r\n                        <th>Title</th>\r\n                        <th>Questions number</th>\r\n                        <th>Action</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {quizRows}\r\n                    </tbody>\r\n                </table>\r\n        );\r\n    }\r\n}\r\n\r\nQuizList.propTypes = {\r\n    quizList : PropTypes.array,\r\n    changePage : PropTypes.func\r\n};\r\nQuizList.defaultProps = {quizList: []};\r\n\r\n","/**\r\n * Created by serg on 11-Jan-19.\r\n */\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport uuid from 'uuid';\r\n\r\nexport default class QuestionEdit extends Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let question = this.getQuestionForEdit();\r\n        console.log(question);\r\n        this.state = {\r\n            question : question\r\n        }\r\n\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleAnswerChange = this.handleAnswerChange.bind(this);\r\n    }\r\n\r\n    handleTextChange(event) {\r\n        let question = this.state.question;\r\n        question.text = event.target.value;\r\n        this.setState({\r\n            question : question\r\n        });\r\n    }\r\n\r\n    handleAnswerChange(event) {\r\n        let question = this.state.question;\r\n        let index = event.target.getAttribute(\"id\");\r\n        //console.log(index);\r\n        question.answers[index].text = event.target.value;\r\n\r\n        this.setState({\r\n            question : question\r\n        });\r\n    }\r\n\r\n    getQuestionForEdit() {\r\n        let question;\r\n\r\n        if(this.props.question === null){\r\n            question = {\r\n                id : 'QN_' + uuid.v4(),\r\n                type : 'MULT',\r\n                text : '',\r\n                answers : [\r\n                    {\r\n                        index : '0',\r\n                        correct : undefined,\r\n                        text : ''\r\n                    },\r\n                    {\r\n                        index : '1',\r\n                        correct : undefined,\r\n                        text : ''\r\n                    },\r\n                    {\r\n                        index : '2',\r\n                        correct : undefined,\r\n                        text : ''\r\n                    },\r\n                    {\r\n                        index : '3',\r\n                        correct : undefined,\r\n                        text : ''\r\n                    },\r\n                ]\r\n            };\r\n        } else {\r\n            question = this.props.question;\r\n        }\r\n\r\n        return question;\r\n    }\r\n\r\n    render() {\r\n        let answers = this.state.question.answers.map((a) => {\r\n            return (\r\n                <li className = \"list-group-item\" key={a.id}>\r\n                    <input\r\n                        type='text'\r\n                        id={a.index}\r\n                        value={a.text}\r\n                        onChange={this.handleAnswerChange}\r\n                        required\r\n                        className='form-control'\r\n                    />\r\n                </li>\r\n            );\r\n\r\n        });\r\n\r\n        //console.log(answers);\r\n\r\n        return (\r\n            <div className=\"panel panel-primary\">\r\n                <div className=\"panel-body\">\r\n                    <label>Text</label><br/>\r\n                    <input\r\n                        type='text'\r\n                        value={this.state.question.text}\r\n                        onChange={this.handleTextChange}\r\n                        required\r\n                        className='form-control'\r\n                    />\r\n                    <label>Answers</label><br/>\r\n                    <ul className=\"list-group\">\r\n                        {answers}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuestionEdit.propTypes = {\r\n    question : PropTypes.object\r\n}\r\n\r\nQuestionEdit.defaultProps = {\r\n    question : null\r\n}","/**\r\n * Created by serg on 10-Jan-19.\r\n */\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport uuid from 'uuid';\r\nimport QuestionEdit from '../components/QuestionEdit';\r\n\r\n\r\nexport default class QuizEdit extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let currentQuiz = this.getQuizForEdit();\r\n\r\n        this.state = {\r\n            currentQuiz : currentQuiz,\r\n            newQuestions : [],\r\n            success : null\r\n        };\r\n\r\n        console.log('CURRENT QUIZ....');\r\n        console.log(this.state.currentQuiz);\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleTitleChange = this.handleTitleChange.bind(this);\r\n        this.handleAddQuestion = this.handleAddQuestion.bind(this);\r\n    }\r\n\r\n    getQuizForEdit() {\r\n        let newQuiz = {};\r\n\r\n        if(this.props.quiz === null){\r\n            newQuiz = {\r\n                id : uuid.v4(),\r\n                title : '',\r\n                questions : []\r\n            }\r\n        }else {\r\n            newQuiz = this.props.quiz;\r\n        }\r\n\r\n        return newQuiz;\r\n    }\r\n\r\n\r\n    handleSubmit(event){\r\n        let oldQuestions = this.state.currentQuiz.questions;\r\n        let newQuestions = this.state.newQuestions;\r\n        let currentQuiz = this.state.currentQuiz;\r\n\r\n        currentQuiz.questions = oldQuestions.concat(newQuestions);\r\n        console.log('SAVING QUIZ....');\r\n        console.log(currentQuiz);\r\n\r\n        this.props.saveQuiz(currentQuiz);\r\n        event.preventDefault();\r\n    }\r\n\r\n    handleTitleChange(event) {\r\n        let newQuiz = this.state.currentQuiz;\r\n        newQuiz.title = event.target.value;\r\n        this.setState({\r\n            currentQuiz : newQuiz\r\n        });\r\n    }\r\n\r\n    handleAddQuestion(){\r\n        let newQuestion = {\r\n            id : 'QN_' + uuid.v4(),\r\n            type : 'MULT',\r\n            text : '',\r\n            answers : [\r\n                {\r\n                    index : '0',\r\n                    correct : undefined,\r\n                    text : ''\r\n                },\r\n                {\r\n                    index : '1',\r\n                    correct : undefined,\r\n                    text : ''\r\n                },\r\n                {\r\n                    index : '2',\r\n                    correct : undefined,\r\n                    text : ''\r\n                },\r\n                {\r\n                    index : '3',\r\n                    correct : undefined,\r\n                    text : ''\r\n                },\r\n            ]\r\n        };\r\n\r\n        // let quiz = this.state.currentQuiz;\r\n        // quiz.questions.push(newQuestion);\r\n        let newQuestions = this.state.newQuestions;\r\n        newQuestions.push(newQuestion);\r\n\r\n        this.setState({\r\n            newQuestions : newQuestions\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let questionListComponents = this.state.currentQuiz.questions.concat(this.state.newQuestions).map((q) => {\r\n            return (\r\n                <QuestionEdit key={q.id} question={q}/>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                {\r\n\r\n                    this.state.success === \"New quiz created.\" ?\r\n                        <div className='alert alert-success'>\r\n                            Product was saved.\r\n                        </div>\r\n                        : null\r\n                }\r\n\r\n                {\r\n\r\n                    !this.state.successCreation === \"Unable to create product.\" ?\r\n                        <div className='alert alert-danger'>\r\n                            Unable to save product. Please try again.\r\n                        </div>\r\n                        : null\r\n                }\r\n\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <table className='table table-bordered table-hover'>\r\n                        <tbody>\r\n\r\n                        <tr>\r\n                            <td>ID</td>\r\n                            <td>\r\n                                <input\r\n                                    type='text'\r\n                                    defaultValue={this.state.currentQuiz.id}\r\n                                    readOnly=\"readOnly\"\r\n                                    required\r\n                                    className='form-control'\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Title</td>\r\n                            <td>\r\n                                <input\r\n                                    type='text'\r\n                                    onChange={this.handleTitleChange}\r\n                                    value={this.state.currentQuiz.title}\r\n                                    required\r\n                                    className='form-control'\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        {/*questions*/}\r\n                        <tr>\r\n                            <td>Questions</td>\r\n                            <td>\r\n                                {questionListComponents}\r\n                                <button className=\"btn btn-primary\" onClick={this.handleAddQuestion}>Add question</button>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n\r\n                            </td>\r\n                            <td>\r\n                                <input\r\n                                    type=\"submit\"\r\n                                    title=\"Save\"\r\n                                    className='btn btn-success'\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nQuizEdit.propTypes = {\r\n    quiz : PropTypes.object,\r\n    saveQuiz : PropTypes.func\r\n};\r\n\r\nQuizEdit.defaultProps = {\r\n    quiz : null\r\n};\r\n","/**\r\n * Created by serg on 11-Jan-19.\r\n */\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class NavBar extends Component{\r\n    render() {\r\n        return(\r\n            <nav className=\"navbar navbar-inverse\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"navbar-header\">\r\n                        <a className=\"navbar-brand\" href=\"#\">Menu</a>\r\n                    </div>\r\n                    <ul className=\"nav navbar-nav\">\r\n                        <li><a href=\"#/quizlist\" onClick={() => this.props.changePage('quizList')}>Quiz List</a></li>\r\n                        <li><a href=\"#/createquiz\" onClick={() => this.props.changePage('quizCreate', null)}>Create Quiz</a></li>\r\n                        <li><a href=\"#\">Link3</a></li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nNavBar.propTypes = {\r\n    changePage : PropTypes.func\r\n}\r\n","import React, { Component } from 'react';\nimport uuid from 'uuid';\nimport Quiz from './components/Quiz';\nimport QuizList from './components/QuizList';\nimport QuizEdit from './components/QuizEdit';\nimport NavBar from './components/NavBar';\nimport './App.css';\n\n\nexport default class App extends Component {\n  constructor(){\n    super();\n    this.state = {\n        currentPage : 'quizList',\n        currentQuiz : {},\n        currentQuestion : {},\n        quizzes : [],\n    };\n\n      this.handleChangePage = this.handleChangePage.bind(this);\n      this.handleSaveQuiz = this.handleSaveQuiz.bind(this);\n  }\n\n  componentWillMount(){\n      this.getQuizzes();\n  }\n\n  handleChangePage(page, quiz = null, question = null) {\n      this.setState({\n          currentPage : page,\n          currentQuiz : quiz,\n          currentQuestion: question\n      });\n  }\n\n  handleSaveQuiz(quiz) {\n      let newQuizzes = this.state.quizzes;\n      //console.log('new quiz ID: ' + quiz.id);\n      let index = newQuizzes.findIndex((q) => q.id === quiz.id);\n      //console.log('found index: ' + index);\n\n      if(index === -1){\n          newQuizzes.push(quiz);\n      }else{\n          newQuizzes[index] = quiz;\n      }\n\n      this.setState({\n          quizzes : newQuizzes,\n      });\n\n      this.handleChangePage('quizList');\n  }\n\n  render() {\n      let currentPageComponents  = this.getCurrentPageComponents();\n      return (\n        <div className=\"App\">\n            <NavBar changePage={this.handleChangePage}/>\n            {currentPageComponents}\n        </div>\n      );\n  }\n\n    getCurrentPageComponents() {\n        let currentPageComponents;\n\n        switch(this.state.currentPage){\n            case 'quizList' :\n                currentPageComponents = <QuizList quizList={this.state.quizzes} changePage = {this.handleChangePage}/>;\n                break;\n            case 'quizView' :\n                currentPageComponents = <Quiz quiz={this.state.currentQuiz} changePage = {this.handleChangePage}/>;\n                break;\n            case 'quizEdit' :\n                currentPageComponents = <QuizEdit quiz={this.state.currentQuiz} saveQuiz = {this.handleSaveQuiz}/>;\n                break;\n            case 'quizCreate' :\n                currentPageComponents = <QuizEdit quiz={null} saveQuiz = {this.handleSaveQuiz}/>;\n                break;\n            default :\n                currentPageComponents = <QuizList quizList={this.state.quizzes} changePage = {this.handleChangePage}/>;\n                break;\n        }\n\n        return currentPageComponents;\n    }\n\n  getQuizzes(){\n    this.setState({\n        quizzes : [\n            {\n                id: uuid.v4(),\n                title : 'Quiz1',\n                questions : [\n                    {\n                        id : 'QN_' + uuid.v4(),\n                        type : 'MULT',\n                        text : 'Your favourite language?',\n                        answers : [\n                            {\n                                index : '0',\n                                id : 'AN_' + uuid.v4(),\n                                correct : true,\n                                text : 'JavaScript'\n                            },\n                            {\n                                index : '1',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'Java'\n                            },\n                            {\n                                index : '2',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'C#'\n                            },\n                            {\n                                index : '3',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'Assembly'\n                            },\n                        ]\n                    },\n                    {\n                        id : 'QN_' + uuid.v4(),\n                        type : 'MULT',\n                        text : 'Your favourite band?',\n                        answers : [\n                            {\n                                index : '0',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'Foo Fighters'\n                            },\n                            {\n                                index : '1',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'RHCP'\n                            },\n                            {\n                                index : '2',\n                                id : 'AN_' + uuid.v4(),\n                                correct : true,\n                                text : 'Incubus'\n                            },\n                            {\n                                index : '3',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'The Beatles'\n                            },\n                        ]\n                    },\n\n                ]\n            },\n            {\n                id : uuid.v4(),\n                title : 'Quiz2',\n                questions : [\n                    {\n                        id : 'QN_' + uuid.v4(),\n                        type : 'MULT',\n                        text : 'Your favourite language?',\n                        answers : [\n                            {\n                                index : '0',\n                                id : 'AN_' + uuid.v4(),\n                                correct : true,\n                                text : 'JavaScript'\n                            },\n                            {\n                                index : '1',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'Java'\n                            },\n                            {\n                                index : '2',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'C#'\n                            },\n                            {\n                                index : '3',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'Assembly'\n                            },\n                        ]\n                    },\n                    {\n                        id : 'QN_' + uuid.v4(),\n                        type : 'MULT',\n                        text : 'Your favourite band?',\n                        answers : [\n                            {\n                                index : '0',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'Foo Fighters'\n                            },\n                            {\n                                index : '1',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'RHCP'\n                            },\n                            {\n                                index : '2',\n                                id : 'AN_' + uuid.v4(),\n                                correct : true,\n                                text : 'Incubus'\n                            },\n                            {\n                                index : '3',\n                                id : 'AN_' + uuid.v4(),\n                                correct : false,\n                                text : 'The Beatles'\n                            },\n                        ]\n                    },\n\n                ]\n            }\n        ]\n    });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}